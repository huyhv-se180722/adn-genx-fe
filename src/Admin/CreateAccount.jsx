import React, { useState } from "react";
import { useNavigate } from "react-router-dom";
import axiosClient from "../config/AxiosClient";

// Upload ·∫£nh l√™n Cloudinary
const uploadToCloudinary = async (file) => {
  const formData = new FormData();
  formData.append("file", file);
  formData.append("upload_preset", "blog_unsigned");
  formData.append("folder", "blog-thumbnails");

  try {
    const res = await fetch("https://api.cloudinary.com/v1_1/dbihuiif1/image/upload", {
      method: "POST",
      body: formData,
    });

    if (!res.ok) throw new Error(`Upload th·∫•t b·∫°i v·ªõi status ${res.status}`);
    const data = await res.json();
    return data.secure_url;
  } catch (err) {
    console.error("Upload ·∫£nh th·∫•t b·∫°i:", err);
    return null;
  }
};

const CreateAccount = () => {
  const [form, setForm] = useState({
    username: "",
    fullName: "",
    password: "",
    confirm: "",
    email: "",
    phoneNumber: "",
    gender: "Nam",
    role: "Nh√¢n vi√™n x√©t nghi·ªám",
    authProvider: "SYSTEM", // ‚úÖ th√™m d√≤ng n√†y
  });

  const [fingerprintFile, setFingerprintFile] = useState(null);
  const [isLoading, setIsLoading] = useState(false);
  const navigate = useNavigate();

  const handleChange = (e) => {
    setForm({ ...form, [e.target.name]: e.target.value });
  };

  // Th√™m function retry
  const retryCreateAccount = async (payload, maxRetries = 3) => {
    for (let i = 0; i < maxRetries; i++) {
      try {
        const response = await axiosClient.post("/api/admin/staff", payload);
        return response;
      } catch (error) {
        // N·∫øu ƒë√£ h·∫øt l·∫ßn th·ª≠, throw error
        if (i === maxRetries - 1) {
          throw error;
        }
        
        // N·∫øu l√† l·ªói concurrency, ƒë·ª£i r·ªìi th·ª≠ l·∫°i
        if (error.response?.status === 400 && 
            error.response?.data?.message?.includes("Row was updated or deleted by another transaction")) {
          const waitTime = 1000 * (i + 1); // ƒê·ª£i 1s, 2s, 3s
          await new Promise(resolve => setTimeout(resolve, waitTime));
          continue;
        }
        
        // L·ªói kh√°c th√¨ kh√¥ng retry
        throw error;
      }
    }
  };

  const handleSubmit = async (e) => {
    e.preventDefault();

    // NgƒÉn kh√¥ng cho submit nhi·ªÅu l·∫ßn
    if (isLoading) return;

    // Validate form
    if (form.password !== form.confirm) {
      alert("M·∫≠t kh·∫©u x√°c nh·∫≠n kh√¥ng kh·ªõp!");
      return;
    }
    // ‚úÖ Th√™m validation cho s·ªë ƒëi·ªán tho·∫°i
  if (form.phoneNumber && form.phoneNumber.trim() !== "") {
    // Check ƒë·ªãnh d·∫°ng s·ªë ƒëi·ªán tho·∫°i Vi·ªát Nam
    const phoneRegex = /^(0[3|5|7|8|9])+([0-9]{8})$/;
    if (!phoneRegex.test(form.phoneNumber)) {
      alert("S·ªë ƒëi·ªán tho·∫°i kh√¥ng h·ª£p l·ªá! Vui l√≤ng nh·∫≠p s·ªë ƒëi·ªán tho·∫°i Vi·ªát Nam (10 s·ªë, b·∫Øt ƒë·∫ßu b·∫±ng 03, 05, 07, 08, 09)");
      return;
    }
  }

    setIsLoading(true); // B·∫Øt ƒë·∫ßu loading

    const mappedRole = form.role === "Nh√¢n vi√™n ghi nh·∫≠n" ? "RECORDER_STAFF" : "LAB_STAFF";

    // Upload fingerprint if exists
    let fingerprintUrl = null;
    if (fingerprintFile) {
      fingerprintUrl = await uploadToCloudinary(fingerprintFile);
      if (!fingerprintUrl) {
        alert("T·∫£i ·∫£nh v√¢n tay th·∫•t b·∫°i. Vui l√≤ng th·ª≠ l·∫°i.");
        setIsLoading(false);
        return;
      }
    }

    // T·∫°o payload
    const payload = {
      username: form.username,
      fullName: form.fullName,
      email: form.email,
      password: form.password,
      role: mappedRole,
      phoneNumber: form.phoneNumber,
      gender: form.gender,
      authProvider: form.authProvider,
      fingerprintImageUrl: fingerprintUrl,
    };

    try {
      // S·ª≠ d·ª•ng retry mechanism
      const response = await retryCreateAccount(payload);
      
      alert("T·∫°o t√†i kho·∫£n th√†nh c√¥ng!");
      navigate("/account-manage");
      
    } catch (error) {
      console.error("‚ùå L·ªói khi t·∫°o t√†i kho·∫£n:", error);

      if (error.response?.status === 400) {
        const errorMessage = error.response.data?.message || "D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá!";
        console.log("üîç Error message t·ª´ backend:", errorMessage);

        if (
          errorMessage.includes("for key 'user.phone_number'") ||
          errorMessage.includes("for key 'user.UK4bgmpi98dylab6qdvf9xyaxu4'")
        ) {
          alert("S·ªë ƒëi·ªán tho·∫°i ƒë√£ t·ªìn t·∫°i!");
        } else {
          alert(`L·ªói: ${errorMessage}`);
        }
      } else if (error.response?.status === 409) {
        alert("T√™n ƒëƒÉng nh·∫≠p ho·∫∑c email ƒë√£ t·ªìn t·∫°i!");
      } else if (error.response?.status === 403) {
        alert("B·∫°n kh√¥ng c√≥ quy·ªÅn th·ª±c hi·ªán h√†nh ƒë·ªông n√†y!");
      } else if (error.response?.status === 422) {
        alert("D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá. Vui l√≤ng ki·ªÉm tra l·∫°i!");
      } else {
        alert("T·∫°o t√†i kho·∫£n th·∫•t b·∫°i. Vui l√≤ng th·ª≠ l·∫°i!");
      } 
    } finally {
      setIsLoading(false); // T·∫Øt loading
    }
  };

  return (
    <div className="min-h-screen flex bg-white">
      <div className="flex-1 flex flex-col">
        <main className="flex-1 flex items-center justify-center bg-white">
          <form
            onSubmit={handleSubmit}
            className="bg-white rounded-[48px] shadow-2xl px-16 py-10 w-[600px] max-w-full"
            style={{ boxShadow: "10px 10px 40px 0 #bbb" }}
          >
            <h2 className="text-3xl font-extrabold text-center mb-8">T·∫†O T√ÄI KHO·∫¢N</h2>

            {/* H·ªç v√† t√™n */}
            <div className="mb-6">
              <label className="font-semibold block mb-2">
                H·ªç v√† t√™n <span className="text-red-500">(*)</span>
</label>
              <input
                name="fullName"
                value={form.fullName}
                onChange={handleChange}
                className="w-full px-4 py-2 rounded bg-gray-100 border border-gray-300"
                required
              />
            </div>

            {/* Username + Role */}
            <div className="flex gap-4 mb-6">
              <div className="flex-1">
                <label className="font-semibold block mb-2">
                  T√™n ng∆∞·ªùi d√πng <span className="text-red-500">(*)</span>
                </label>
                <input
                  name="username"
                  value={form.username}
                  onChange={handleChange}
                  className="w-full px-4 py-2 rounded bg-gray-100 border border-gray-300"
                  required
                />
              </div>
              <div className="flex-1">
                <label className="font-semibold block mb-2">Vai tr√≤:</label>
                <select
                  name="role"
                  value={form.role}
                  onChange={handleChange}
                  className="w-full px-4 py-2 rounded bg-gray-100 border border-gray-300"
                >
                  <option>Nh√¢n vi√™n x√©t nghi·ªám</option>
                  <option>Nh√¢n vi√™n ghi nh·∫≠n</option>
                </select>
              </div>
            </div>

            {/* Password */}
            <div className="mb-6">
              <label className="font-semibold block mb-2">
                M·∫≠t kh·∫©u <span className="text-red-500">(*)</span>
              </label>
              <input
                type="password"
                name="password"
                value={form.password}
                onChange={handleChange}
                className="w-full px-4 py-2 rounded bg-gray-100 border border-gray-300"
                required
              />
            </div>

            {/* Confirm Password */}
            <div className="mb-6">
              <label className="font-semibold block mb-2">
                X√°c nh·∫≠n m·∫≠t kh·∫©u <span className="text-red-500">(*)</span>
              </label>
              <input
                type="password"
                name="confirm"
                value={form.confirm}
                onChange={handleChange}
                className="w-full px-4 py-2 rounded bg-gray-100 border border-gray-300"
                required
              />
            </div>

            {/* Email */}
            <div className="mb-6">
              <label className="font-semibold block mb-2">
                Email <span className="text-red-500">(*)</span>
              </label>
              <input
                type="email"
                name="email"
                value={form.email}
                onChange={handleChange}
                className="w-full px-4 py-2 rounded bg-gray-100 border border-gray-300"
                required
              />
</div>

            {/* Phone + Gender */}
            <div className="flex gap-4 mb-6">
              <div className="flex-1">
                <label className="font-semibold block mb-2">S·ªë ƒëi·ªán tho·∫°i</label>
                <input
                  type="text"
                  name="phoneNumber"
                  value={form.phoneNumber}
                  onChange={handleChange}
                  className="w-full px-4 py-2 rounded bg-gray-100 border border-gray-300"
                />
              </div>
              <div className="flex-1">
                <label className="font-semibold block mb-2">Gi·ªõi t√≠nh</label>
                <select
                  name="gender"
                  value={form.gender}
                  onChange={handleChange}
                  className="w-full px-4 py-2 rounded bg-gray-100 border border-gray-300"
                >
                  <option>Nam</option>
                  <option>N·ªØ</option>
                  <option>Kh√°c</option>
                </select>
              </div>
            </div>

            {/* ·∫¢nh v√¢n tay */}
            <div className="mb-8">
              <label className="font-semibold block mb-2">·∫¢nh v√¢n tay</label>
              <input
                type="file"
                accept="image/*"
                onChange={(e) => setFingerprintFile(e.target.files[0])}
                className="w-full px-4 py-2 rounded bg-gray-100 border border-gray-300"
              />
            </div>

            {/* Submit buttons v·ªõi loading state */}
            <div className="flex justify-center gap-4">
              <button
                type="submit"
                disabled={isLoading}
                className={`px-8 py-2 rounded-full font-semibold shadow transition ${
                  isLoading
                    ? "bg-gray-400 text-gray-600 cursor-not-allowed"
                    : "bg-[#009fe3] text-white hover:bg-[#007bbd]"
                }`}
              >
                {isLoading ? "ƒêANG T·∫†O..." : "T·∫†O T√ÄI KHO·∫¢N"}
              </button>
              <button
                type="button"
                disabled={isLoading}
                className={`px-8 py-2 rounded-full font-semibold shadow transition ${
                  isLoading
                    ? "bg-gray-200 text-gray-400 cursor-not-allowed"
                    : "bg-gray-300 text-[#2323a7] hover:bg-gray-400"
                }`}
                onClick={() => navigate("/account-manage")}
              >
                H·ª¶Y B·ªé
              </button>
            </div>
          </form>
        </main>
      </div>
    </div>
  );
};

export default CreateAccount;